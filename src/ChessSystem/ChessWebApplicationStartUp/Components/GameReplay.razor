@using ChessSystem.Application.Archive.Queries.PlayedGames
@using ChessGameLogic
@using ChessGameLogic.Enums

@inject MediatR.IMediator Mediator
@inject BrowserService BrowserService

@using ChessSystem.Application.Archive.Queries.ReplayGame

@* Imports for blazor *@
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

<h3>GameReplay</h3>
@{
    var chessFieldColor = "White";
}
<div style="font-size: 0px;">
    @if (Enum.Parse<ChessColors>(this.PlayerColor) == ChessColors.White)
    {
        @for (int vertical = 8; vertical >= 1; vertical--)
        {
            for (char horizontal = 'a'; horizontal <= 'h'; horizontal++)
            {
                if (horizontal != 'a')
                {
                    if (chessFieldColor == "White")
                    {
                        chessFieldColor = "Darkgray";
                    }
                    else
                    {
                        chessFieldColor = "White";
                    }

                }
                var figureInfo = this.ChessGame.GetFigureOnPositionInfo(horizontal, vertical);


                char hor = horizontal;
                int ver = vertical;

                <button disabled="disabled"
                        id="@(horizontal.ToString() + vertical)field"
                        style="margin:0px; border: none; width: @(fieldSize)px; height:@(fieldSize)px; background-color: @chessFieldColor">
                    @if (figureInfo != null)
                    {
                        <img style="width: @(figurePictureSize)px; height:@(figurePictureSize)px" src="/ImagesForFigures/@($"{figureInfo.figureType}{figureInfo.figureColor}{chessFieldColor}").jpg" alt="Alternate Text" />
                    }
                    else
                    {
                        <img style="width: @(figurePictureSize)px; height:@(figurePictureSize)px" src="/ImagesForFigures/@($"{chessFieldColor}").jpg" alt="Alternate Text" />
                    }
                </button>
            }
            <br />
        }
    }
    else
    {
        @for (int vertical = 1; vertical <= 8; vertical++)
        {
            for (char horizontal = 'h'; horizontal >= 'a'; horizontal--)
            {
                if (horizontal != 'h')
                {
                    if (chessFieldColor == "White")
                    {
                        chessFieldColor = "Darkgray";
                    }
                    else
                    {
                        chessFieldColor = "White";
                    }

                }
                var figureInfo = this.ChessGame.GetFigureOnPositionInfo(horizontal, vertical);

                char hor = horizontal;
                int ver = vertical;

                <button disabled="disabled"
                        id="@(horizontal.ToString() + vertical)field" style="margin:0px; border: none; width: @(fieldSize)px; height:@(fieldSize)px; background-color: @chessFieldColor">
                    @if (figureInfo != null)
                    {
                        <img style="width: @(figurePictureSize)px; height:@(figurePictureSize)px" src="/ImagesForFigures/@($"{figureInfo.figureType}{figureInfo.figureColor}{chessFieldColor}").jpg" alt="Alternate Text" />
                    }
                    else
                    {
                        <img style="width: @(figurePictureSize)px; height:@(figurePictureSize)px" src="/ImagesForFigures/@($"{chessFieldColor}").jpg" alt="Alternate Text" />
                    }
                </button>
            }
            <br />
        }
    }
</div>
<div>
    <button class="btn btn-primary" @onclick="@(async (e) => { await MoveNextMove(); })">Next move</button>
</div>

@code {
    public PlayedGameOutputModel GameModel { get; set; }

    [Parameter]
    public string PlayerColor { get; set; }

    [Parameter]
    public string GameId { get; set; }

    public ChessGame ChessGame { get; set; }

    public int MovesMade { get; set; }

    private int figurePictureSize = 30;

    private int fieldSize = 40;

    protected override async Task OnInitializedAsync()
    {
        this.GameModel = await this.Mediator.Send(new GetReplayGameQuery(GameId));
    }

    public GameReplay()
    {
        this.ChessGame = new ChessGame(ChooseFigure, async (_) => { await Task.CompletedTask; });
        this.MovesMade = 0;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        var dimensionsOfTheScreen = await BrowserService.GetDimensions();
        if (dimensionsOfTheScreen.Width < 400)
        {
            this.figurePictureSize = 30;
            this.fieldSize = 40;
        }
        else
        {
            this.figurePictureSize = 60;
            this.fieldSize = 80;
        }

        await base.OnAfterRenderAsync(firstRender);

        this.StateHasChanged();
    }

    private ChessGameLogic.ClientInteractionEntities.ChessFigureProductionType ChooseFigure()
    {
        return ChessGameLogic.ClientInteractionEntities.ChessFigureProductionType.Queen;
    }

    private async Task MoveNextMove()
    {
        var move = this.GameModel.Moves[this.MovesMade];
        if (move is ChessSystem.Application.Archive.Queries.PlayedGames.NormalMoveOutputModel)
        {
            var itemAsNormalMove = (ChessSystem.Application.Archive.Queries.PlayedGames.NormalMoveOutputModel)move;
            await this.ChessGame.NormalMove(
                itemAsNormalMove.InitialPosition.Horizontal,
                itemAsNormalMove.InitialPosition.Vertical,
                itemAsNormalMove.TargetPosition.Horizontal,
                itemAsNormalMove.TargetPosition.Vertical,
                Enum.Parse<ChessGameLogic.ClientInteractionEntities.ChessFigureType>(itemAsNormalMove.ChessFigureType.ToString()),
                Enum.Parse<ChessGameLogic.Enums.ChessColors>(itemAsNormalMove.ChessFigureColor.ToString()));

        }
        if (move is ChessSystem.Application.Archive.Queries.PlayedGames.CastlingMoveOutputModel)
        {

        }
        if (move is ChessSystem.Application.Archive.Queries.PlayedGames.ProductionMoveOutputModel)
        {

        }
        this.StateHasChanged();
        this.MovesMade++;
    }
}
