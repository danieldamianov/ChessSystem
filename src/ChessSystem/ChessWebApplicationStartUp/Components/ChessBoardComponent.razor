@using ChessGameLogic
@using ChessGameLogic.ClientInteractionEntities
@using ChessGameLogic.Enums

@* Imports for blazor *@
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop


<h3>Chess board</h3>
<br />
@{
    var color = "white";
}
<div id="chessBoard" style="font-size: 0px;">
    @if (this.chessColor == ChessColors.White)
    {
        @for (int vertical = 8; vertical >= 1; vertical--)
        {
            for (char horizontal = 'a'; horizontal <= 'h'; horizontal++)
            {
                if (horizontal != 'a')
                {
                    if (color == "white")
                    {
                        color = "darkgray";
                    }
                    else
                    {
                        color = "white";
                    }

                }
                var figureInfo = this.chessGame.GetFigureOnPositionInfo(horizontal, vertical);
                <button style="margin:0px; border: none; width: 70px; height:70px; background-color: @color">
                    @if (figureInfo != null)
                    {
                        var parsedColor = color == "white" ? "White" : "DarkGray";
                        <img style="width: 50px; height:50px" src="/ImagesForFigures/@($"{figureInfo.figureType}{figureInfo.figureColor}{parsedColor}").jpg" alt="Alternate Text" />
                    }
                </button>
            }
            <br />
        }
    }
    else
    {


        @for (int vertical = 1; vertical <= 8; vertical++)
        {
            for (char horizontal = 'h'; horizontal >= 'a'; horizontal--)
            {
                if (horizontal != 'h')
                {
                    if (color == "white")
                    {
                        color = "darkgray";
                    }
                    else
                    {
                        color = "white";
                    }

                }
                var figureInfo = this.chessGame.GetFigureOnPositionInfo(horizontal, vertical);
                <button style="margin:0px; border: none; width: 70px; height:70px; background-color: @color">
                    @if (figureInfo != null)
                    {
                        var parsedColor = color == "white" ? "White" : "DarkGray";
                        <img style="width: 50px; height:50px" src="/ImagesForFigures/@($"{figureInfo.figureType}{figureInfo.figureColor}{parsedColor}").jpg" alt="Alternate Text" />
                    }
                </button>
            }
            <br />
        }
    }

</div>

@code {
    private ChessGame chessGame;

    [Parameter]
    public ChessColors chessColor { get; set; }

    public ChessBoardComponent()
    {
        this.chessGame = new ChessGame(ChooseFigureToProduce, HandleGameEnding);
    }

    private static ChessFigureProductionType ChooseFigureToProduce()
    {
        return ChessFigureProductionType.Queen;
    }

    private static void HandleGameEnding(EndGameResult endGameResult)
    {

    }
}
